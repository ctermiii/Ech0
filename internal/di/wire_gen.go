// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/google/wire"
	"github.com/lin-snow/ech0/internal/cache"
	"github.com/lin-snow/ech0/internal/event"
	"github.com/lin-snow/ech0/internal/fediverse"
	handler8 "github.com/lin-snow/ech0/internal/handler/backup"
	handler4 "github.com/lin-snow/ech0/internal/handler/common"
	handler7 "github.com/lin-snow/ech0/internal/handler/connect"
	handler3 "github.com/lin-snow/ech0/internal/handler/echo"
	handler9 "github.com/lin-snow/ech0/internal/handler/fediverse"
	handler5 "github.com/lin-snow/ech0/internal/handler/setting"
	handler6 "github.com/lin-snow/ech0/internal/handler/todo"
	handler2 "github.com/lin-snow/ech0/internal/handler/user"
	"github.com/lin-snow/ech0/internal/handler/web"
	repository2 "github.com/lin-snow/ech0/internal/repository/common"
	repository8 "github.com/lin-snow/ech0/internal/repository/connect"
	repository3 "github.com/lin-snow/ech0/internal/repository/echo"
	repository6 "github.com/lin-snow/ech0/internal/repository/fediverse"
	"github.com/lin-snow/ech0/internal/repository/keyvalue"
	repository9 "github.com/lin-snow/ech0/internal/repository/queue"
	repository4 "github.com/lin-snow/ech0/internal/repository/setting"
	repository7 "github.com/lin-snow/ech0/internal/repository/todo"
	"github.com/lin-snow/ech0/internal/repository/user"
	repository5 "github.com/lin-snow/ech0/internal/repository/webhook"
	service8 "github.com/lin-snow/ech0/internal/service/backup"
	"github.com/lin-snow/ech0/internal/service/common"
	service7 "github.com/lin-snow/ech0/internal/service/connect"
	service5 "github.com/lin-snow/ech0/internal/service/echo"
	service4 "github.com/lin-snow/ech0/internal/service/fediverse"
	service2 "github.com/lin-snow/ech0/internal/service/setting"
	service6 "github.com/lin-snow/ech0/internal/service/todo"
	service3 "github.com/lin-snow/ech0/internal/service/user"
	"github.com/lin-snow/ech0/internal/task"
	"github.com/lin-snow/ech0/internal/transaction"
	"gorm.io/gorm"
)

// Injectors from wire.go:

// BuildHandlers 使用wire生成的代码来构建Handlers实例
func BuildHandlers(dbProvider func() *gorm.DB, cacheFactory *cache.CacheFactory, tmFactory *transaction.TransactionManagerFactory, ebProvider func() event.IEventBus) (*Handlers, error) {
	webHandler := handler.NewWebHandler()
	transactionManager := ProvideTransactionManager(tmFactory)
	iCache := ProvideCache(cacheFactory)
	userRepositoryInterface := repository.NewUserRepository(dbProvider, iCache)
	commonRepositoryInterface := repository2.NewCommonRepository(dbProvider)
	echoRepositoryInterface := repository3.NewEchoRepository(dbProvider, iCache)
	keyValueRepositoryInterface := keyvalue.NewKeyValueRepository(dbProvider, iCache)
	commonServiceInterface := service.NewCommonService(transactionManager, commonRepositoryInterface, echoRepositoryInterface, keyValueRepositoryInterface, ebProvider)
	settingRepositoryInterface := repository4.NewSettingRepository(dbProvider)
	webhookRepositoryInterface := repository5.NewWebhookRepository(dbProvider)
	settingServiceInterface := service2.NewSettingService(transactionManager, commonServiceInterface, keyValueRepositoryInterface, settingRepositoryInterface, webhookRepositoryInterface)
	userServiceInterface := service3.NewUserService(transactionManager, userRepositoryInterface, settingServiceInterface, ebProvider)
	userHandler := handler2.NewUserHandler(userServiceInterface)
	fediverseRepositoryInterface := repository6.NewFediverseRepository(dbProvider)
	fediverseCore := fediverse.NewFediverseCore(fediverseRepositoryInterface, keyValueRepositoryInterface, userRepositoryInterface, echoRepositoryInterface)
	fediverseServiceInterface := service4.NewFediverseService(fediverseCore, transactionManager, fediverseRepositoryInterface, userRepositoryInterface, echoRepositoryInterface)
	echoServiceInterface := service5.NewEchoService(transactionManager, commonServiceInterface, echoRepositoryInterface, commonRepositoryInterface, fediverseServiceInterface, ebProvider)
	echoHandler := handler3.NewEchoHandler(echoServiceInterface)
	commonHandler := handler4.NewCommonHandler(commonServiceInterface)
	settingHandler := handler5.NewSettingHandler(settingServiceInterface)
	todoRepositoryInterface := repository7.NewTodoRepository(dbProvider, iCache)
	todoServiceInterface := service6.NewTodoService(transactionManager, todoRepositoryInterface, commonServiceInterface)
	todoHandler := handler6.NewTodoHandler(todoServiceInterface)
	connectRepositoryInterface := repository8.NewConnectRepository(dbProvider)
	connectServiceInterface := service7.NewConnectService(transactionManager, connectRepositoryInterface, echoRepositoryInterface, commonServiceInterface, settingServiceInterface)
	connectHandler := handler7.NewConnectHandler(connectServiceInterface)
	backupServiceInterface := service8.NewBackupService(commonServiceInterface, ebProvider)
	backupHandler := handler8.NewBackupHandler(backupServiceInterface)
	fediverseHandler := handler9.NewFediverseHandler(fediverseServiceInterface)
	handlers := NewHandlers(webHandler, userHandler, echoHandler, commonHandler, settingHandler, todoHandler, connectHandler, backupHandler, fediverseHandler)
	return handlers, nil
}

func BuildTasker(dbProvider func() *gorm.DB, cacheFactory *cache.CacheFactory, tmFactory *transaction.TransactionManagerFactory, ebProvider func() event.IEventBus) (*task.Tasker, error) {
	transactionManager := ProvideTransactionManager(tmFactory)
	commonRepositoryInterface := repository2.NewCommonRepository(dbProvider)
	iCache := ProvideCache(cacheFactory)
	echoRepositoryInterface := repository3.NewEchoRepository(dbProvider, iCache)
	keyValueRepositoryInterface := keyvalue.NewKeyValueRepository(dbProvider, iCache)
	commonServiceInterface := service.NewCommonService(transactionManager, commonRepositoryInterface, echoRepositoryInterface, keyValueRepositoryInterface, ebProvider)
	queueRepositoryInterface := repository9.NewQueueRepository(dbProvider)
	tasker := task.NewTasker(commonServiceInterface, ebProvider, queueRepositoryInterface)
	return tasker, nil
}

func BuildEventRegistrar(dbProvider func() *gorm.DB, ebProvider func() event.IEventBus, cacheFactory *cache.CacheFactory, tmFactory *transaction.TransactionManagerFactory) (*event.EventRegistrar, error) {
	webhookRepositoryInterface := repository5.NewWebhookRepository(dbProvider)
	queueRepositoryInterface := repository9.NewQueueRepository(dbProvider)
	transactionManager := ProvideTransactionManager(tmFactory)
	webhookDispatcher := event.NewWebhookDispatcher(ebProvider, webhookRepositoryInterface, queueRepositoryInterface, transactionManager)
	deadLetterResolver := event.NewDeadLetterResolver(queueRepositoryInterface, webhookDispatcher)
	fediverseRepositoryInterface := repository6.NewFediverseRepository(dbProvider)
	iCache := ProvideCache(cacheFactory)
	keyValueRepositoryInterface := keyvalue.NewKeyValueRepository(dbProvider, iCache)
	userRepositoryInterface := repository.NewUserRepository(dbProvider, iCache)
	echoRepositoryInterface := repository3.NewEchoRepository(dbProvider, iCache)
	fediverseCore := fediverse.NewFediverseCore(fediverseRepositoryInterface, keyValueRepositoryInterface, userRepositoryInterface, echoRepositoryInterface)
	fediverseAgent := event.NewFediverseAgent(fediverseCore)
	eventHandlers := event.NewEventHandlers(webhookDispatcher, deadLetterResolver, fediverseAgent)
	eventRegistrar := event.NewEventRegistry(ebProvider, eventHandlers)
	return eventRegistrar, nil
}

// wire.go:

// CacheSet 包含了构建缓存所需的所有 Provider
var CacheSet = wire.NewSet(
	ProvideCache,
)

// TransactionManagerSet 包含了构建事务管理器所需的所有 Provider
var TransactionManagerSet = wire.NewSet(
	ProvideTransactionManager,
)

// WebSet 包含了构建 WebHandler 所需的所有 Provider
var WebSet = wire.NewSet(handler.NewWebHandler)

// UserSet 包含了构建 UserHandler 所需的所有 Provider
var UserSet = wire.NewSet(repository.NewUserRepository, service3.NewUserService, handler2.NewUserHandler)

// EchoSet 包含了构建 EchoHandler 所需的所有 Provider
var EchoSet = wire.NewSet(repository3.NewEchoRepository, service5.NewEchoService, handler3.NewEchoHandler)

// CommonSet 包含了构建 CommonHandler 所需的所有 Provider
var CommonSet = wire.NewSet(repository2.NewCommonRepository, service.NewCommonService, handler4.NewCommonHandler)

// KeyValueSet 包含了构建 KeyValueRepository 所需的所有 Provider
var KeyValueSet = wire.NewSet(keyvalue.NewKeyValueRepository)

// SettingSet 包含了构建 SettingHandler 所需的所有 Provider
var SettingSet = wire.NewSet(repository4.NewSettingRepository, service2.NewSettingService, handler5.NewSettingHandler)

// TodoSet 包含了构建 TodoHandler 所需的所有 Provider
var TodoSet = wire.NewSet(repository7.NewTodoRepository, service6.NewTodoService, handler6.NewTodoHandler)

// ConnectSet 包含了构建 ConnectHandler 所需的所有 Provider
var ConnectSet = wire.NewSet(repository8.NewConnectRepository, service7.NewConnectService, handler7.NewConnectHandler)

// BackupSet 包含了构建 BackupHandler 所需的所有 Provider
var BackupSet = wire.NewSet(handler8.NewBackupHandler, service8.NewBackupService)

// WebhookSet 包含了构建 WebhookDispatcher 所需的所有 Provider
var WebhookSet = wire.NewSet(repository5.NewWebhookRepository)

// TaskSet 包含了构建 Tasker 所需的所有 Provider
var TaskSet = wire.NewSet(task.NewTasker)

// QueueSet 包含了构建 Queue 所需的所有 Provider
var QueueSet = wire.NewSet(repository9.NewQueueRepository)

// FediverseCoreSet 包含了构建 FediverseCore 所需的所有 Provider
var FediverseCoreSet = wire.NewSet(fediverse.NewFediverseCore)

// FediverseSet 包含了构建 Fediverse 所需的所有 Provider
var FediverseSet = wire.NewSet(repository6.NewFediverseRepository, service4.NewFediverseService, handler9.NewFediverseHandler, event.NewFediverseAgent)

// EventSet 包含了构建 Event 相关所需的所有 Provider
var EventSet = wire.NewSet(event.NewWebhookDispatcher, event.NewDeadLetterResolver, event.NewEventHandlers, event.NewEventRegistry)
